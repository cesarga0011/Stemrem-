#Code was adapted from original source: "https://www.costalab.org/wp-content/uploads/2020/11/R_class_D3.html" written by Tiago Maie and Martin Manalov 
#Code written in Rstudio

#TCGA Survival Analysis 

#set wd 
setwd("C:/Users/cesar/OneDrive - Stanford/SR205_group-project/TCGA data")

# Load packages
library("TCGAbiolinks")
library("limma")
library("edgeR")
library("glmnet")
library("factoextra")
library("FactoMineR")
library("caret")
library("SummarizedExperiment")
library("gplots")
library("survival")
library("survminer")
library("RColorBrewer")
library("gProfileR")
library("genefilter")
library("EnsDb.Hsapiens.v79")
library("sjPlot")
library("stargazer")

#Query TCGA database through R with GDC Query 
GDCprojects = getGDCprojects() 
head(GDCprojects[c("project_id", "name")])

#acess data for Breast Invasive Carcinoma and Pancreatic Ductal Adenocarcinoma
TCGAbiolinks:::getProjectSummary("TCGA-BRCA") #Breast Cancer
TCGAbiolinks:::getProjectSummary("TCGA-PAAD") #Pancreatic Cancer 


get_OmicsData <- function(project_type  = "Cancer_Type",
                          Outdir   = "mRNA"){
  if(Outdir == "mRNA"){
    query_Data <- GDCquery(project = project_type,
                           data.category = "Transcriptome Profiling",
                           data.type = "Gene Expression Quantification",
                           workflow.type = "STAR - Counts",
                           sample.type = c("Primary Tumor"),
                           experimental.strategy = "RNA-Seq")    
  }else if(Outdir == "miRNA"){
    query_Data <- GDCquery(project = project_type,
                           data.category = "Transcriptome Profiling",
                           data.type = "miRNA Expression Quantification",
                           workflow.type = "BCGSC miRNA Profiling")     
  }else if(Outdir == "CNV"){
    query_Data <- GDCquery(project = project_type,
                           data.category = "Copy Number Variation",
                           data.type = "Copy Number Segment")     
  }else if(Outdir == "DNA_Methylation"){
    query_Data <- GDCquery(project = project_type,
                           data.category = "DNA methylation",
                           legacy = TRUE)     
  }
  
  GDCdownload(query = query_Data,
              method = "api",
              files.per.chunk = 60,
              directory = Outdir)
  
  expdat <- GDCprepare(query = query_Data,
                       directory = Outdir)
  return(expdat)
}

#run above function and save in new object if data files have not been downloaded previously
BRCA_dat_mRNA <- get_OmicsData(project = "TCGA-BRCA", Outdir = "mRNA") #Breast Cancer
PAAD_dat_mRNA <- get_OmicsData(project = "TCGA-PAAD",Outdir = "mRNA") #Pancreatic Cancer

#trying saving file again 
saveRDS(object = BRCA_dat_mRNA,     #Breast Cancer dataset
        file = "BRCA_dat_mRNA.RDS",
        compress = FALSE)

saveRDS(object = PAAD_dat_mRNA,     #Pancreatic Cancer dataset 
        file = "PAAD_dat_mRNA.RDS",
        compress = FALSE)

#load rds file saved above: 
BRCA_dat_mRNA = readRDS(file = "BRCA_dat_mRNA.RDS")
PAAD_dat_mRNA = readRDS(file = "PAAD_dat_mRNA.RDS")

#gene_matrix 
BRCAMatrix <- assay(BRCA_dat_mRNA) #it appears to be a count matrix from rna_seq data for all genes that were found from the data set. 
length(rownames(BRCAMatrix)) #The gene matrix has 60,660 genes. I want to build a survival curve from this dataset. This dataset includes Tumor, metastatic, and normal tissue. 
length(colnames(BRCAMatrix))

PAADMatrix <- assay(PAAD_dat_mRNA)
length(rownames(PAADMatrix))
length(colnames(PAADMatrix))

##transpose columns and rows of gene matrix, where each column corresponds to gene via ensemble ID and rows correspond to patient sample 
tBRCAMatrix <- t(BRCAMatrix)
tPAADMatrix <- t(PAADMatrix)

#change matrices to dataframe 
dataframe_data_brca = as.data.frame(tBRCAMatrix)
dataframe_data_paad = as.data.frame(tPAADMatrix)

#convert gene list to ensemble IDs 
gene_list <- readRDS(file = "gene_list_try4.RDS")
gene_list <- as.character(gene_list)

#length(gene_list)
geneSymbols <-  unlist(gene_list)
geneIDs2 <- ensembldb::select(EnsDb.Hsapiens.v79, keys= geneSymbols, keytype = "SYMBOL", columns = c("SYMBOL","GENEID"))
#print(geneIDs2)
#typeof(geneIDs2)


#Select Gene for median split KM Survival Analysis
pvalue_brca_list <- list() #initialize list 
pvalue_paad_list <- list()
gene_name_list <- list() #initialize list
for (i in 1:length(geneIDs2$GENEID)){
  gene <- geneIDs2$GENEID[i] #GeneID's are stored in a gene list. 
  gene_name <- geneIDs2$SYMBOL[i]
  print(gene)
  print(gene_name)
  if (identical(grep(gene, colnames(dataframe_data_brca)), integer(0))){ #skips genes in list that are not found in the mRNA data of the TCGA dataset. 
    next
  }
  gene_name_list <- append(gene_name_list, gene_name)
  #find median value of selected gene of interest
  table(grep(gene, colnames(dataframe_data_brca))) #breast cancer dataset
  median_value_brca <- median(dataframe_data_brca[[grep(gene, colnames(dataframe_data_brca))]]) #breast cancer dataset
  print(median_value_brca)
  
  table(grep(gene, colnames(dataframe_data_paad))) #pancreatic cancer dataset
  median_value_paad <- median(dataframe_data_paad[[grep(gene, colnames(dataframe_data_paad))]]) #pancreatic cancer dataset
  print(median_value_paad)
  
  #split patient ID's into high and low expressors for the gene of interest 
  Hi_expr_idx_brca <- (which(dataframe_data_brca[[grep(gene, colnames(dataframe_data_brca))]] >= median_value_brca)) #brca cancer dataset
  Lo_expr_idx_brca <- (which(dataframe_data_brca[[grep(gene, colnames(dataframe_data_brca))]] < median_value_brca)) #brca cancer dataset 
  length(Hi_expr_idx_brca)
  length(Lo_expr_idx_brca)
  
  Hi_expr_idx_paad <- (which(dataframe_data_paad[[grep(gene, colnames(dataframe_data_paad))]] >= median_value_paad)) #pancreatic cancer dataset
  Lo_expr_idx_paad <- (which(dataframe_data_paad[[grep(gene, colnames(dataframe_data_paad))]] < median_value_paad)) #pancreatic cancer dataset 
  length(Hi_expr_idx_paad)
  length(Lo_expr_idx_paad)
  
  Hi_expr_pt_brca <- rownames(dataframe_data_brca)[Hi_expr_idx_brca] #brca dataset
  Hi_expr_pt_brca_sub <- substring(Hi_expr_pt_brca, 1, 12) 
  length(Hi_expr_pt_brca_sub)
  
  Lo_expr_pt_brca <- rownames(dataframe_data_brca)[Lo_expr_idx_brca] #brca dataset
  Lo_expr_pt_brca_sub <- substring(Lo_expr_pt_brca, 1, 12) 
  length(Lo_expr_pt_brca_sub)
  
  Hi_expr_pt_paad <- rownames(dataframe_data_paad)[Hi_expr_idx_paad] #paad dataset
  Hi_expr_pt_paad_sub <- substring(Hi_expr_pt_paad, 1, 12) 
  
  Lo_expr_pt_paad <- rownames(dataframe_data_paad)[Lo_expr_idx_paad] #paad dataset
  Lo_expr_pt_paad_sub <- substring(Lo_expr_pt_paad, 1, 12) 
  
  ##Survival Analysis
  tcga_data_brca = readRDS(file = "BRCA_dat_mRNA.RDS")
  tcga_data_paad = readRDS(file = "PAAD_dat_mRNA.RDS")
  
  #extract clinical data
  clinical_brca = tcga_data_brca@colData
  clinical_paad = tcga_data_paad@colData
  
  # we are only interested in the "Primary Tumor" cases for survival
  clin_df_brca = clinical_brca[clinical_brca$definition == "Primary solid Tumor",
                               c("patient",
                                 "vital_status",
                                 "days_to_death",
                                 "days_to_last_follow_up")]
  
  clin_df_paad = clinical_paad[clinical_paad$definition == "Primary solid Tumor",
                               c("patient",
                                 "vital_status",
                                 "days_to_death",
                                 "days_to_last_follow_up")]
  
  # create a new boolean variable that has TRUE for dead patients
  # and FALSE for live patients
  clin_df_brca$deceased = clin_df_brca$vital_status == "Dead"
  clin_df_paad$deceased = clin_df_paad$vital_status == "Dead"
  
  # create an "overall survival" variable that is equal to days_to_death
  # for dead patients, and to days_to_last_follow_up for patients who
  # are still alive
  clin_df_brca$overall_survival = ifelse(clin_df_brca$deceased,   
                                         clin_df_brca$days_to_death,
                                         clin_df_brca$days_to_last_follow_up)
  
  clin_df_paad$overall_survival = ifelse(clin_df_paad$deceased,   
                                         clin_df_paad$days_to_death,
                                         clin_df_paad$days_to_last_follow_up)
  

  ##Kaplan-Meier Plots 
  Surv(clin_df_brca$overall_survival, clin_df_brca$deceased) #we censor the data for patients who were lost to follow-up
  Surv(clin_df_paad$overall_survival, clin_df_paad$deceased) 
  
  
  ####### attach up/down to patient data
  clin_df_brca[["gene"]] = "tbd"
  clin_df_brca$gene[clin_df_brca$patient %in% Hi_expr_pt_brca_sub] <- "UP"  
  clin_df_brca$gene[clin_df_brca$patient %in% Lo_expr_pt_brca_sub] <- "DOWN"
  
  
  clin_df_paad[["gene"]] = "tbd"
  clin_df_paad$gene[clin_df_paad$patient %in% Hi_expr_pt_paad_sub] <- "UP"
  clin_df_paad$gene[clin_df_paad$patient %in% Lo_expr_pt_paad_sub] <- "DOWN"
  dim(clin_df_paad)
  
  #Fit a survival model
  fit_brca = survfit(Surv(overall_survival, deceased) ~ gene, data=clin_df_brca)
  fit_paad = survfit(Surv(overall_survival, deceased) ~ gene, data=clin_df_paad)
  
  # we can extract the survival p-value and print it
  pval_brca = surv_pvalue(fit_brca, data=clin_df_brca)$pval
  print(pval_brca)
  pvalue_brca_list <- append(pvalue_brca_list, pval_brca)
  
  pval_paad = surv_pvalue(fit_paad, data=clin_df_paad)$pval
  print(pval_paad)
  pvalue_paad_list <- append(pvalue_paad_list, pval_paad)
  
  #Create survival KM plots
  p1 <- ggsurvplot(fit_brca, data=clin_df_brca, pval=T, risk.table=T, title=paste("TCGA-BRCA", gene_name))
  ggsave(paste0('out/', gene_name, '_brca.jpg'), plot = print(p1$plot), width = 5, height = 5)
  p2 <- ggsurvplot(fit_paad, data=clin_df_paad, pval=T, risk.table=T, title=paste("TCGA-PAAD", gene_name))
  ggsave(paste0('out/', gene_name, '_pancreas.jpg'), plot = print(p2$plot), width = 5, height = 5)  
}

#create a dataframe of pvalues for top 10 differentially expressed genes
pval_df <- data.frame(unlist(gene_name_list), unlist(pvalue_brca_list), unlist(pvalue_paad_list)) #that didn't work becaue I was unable to crea
names(pval_df) <- c("Gene", "p-value BRCA", "p-value PAAD")
tab_df(pval_df, file = "pvalue_table_try4.doc") #generate word table with pvalues
